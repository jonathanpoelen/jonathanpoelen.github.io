<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Make on Jonathan Poelen&#39;s Blog</title>
    <link>https://jonathanpoelen.github.io/categories/make/</link>
    <description>Recent content in Make on Jonathan Poelen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-FR</language>
    <managingEditor>jonathan.poelen@gmail.com (Jonathan Poelen)</managingEditor>
    <webMaster>jonathan.poelen@gmail.com (Jonathan Poelen)</webMaster>
    <lastBuildDate>Wed, 26 Jun 2013 11:05:28 +0100</lastBuildDate>
    
	<atom:link href="https://jonathanpoelen.github.io/categories/make/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>make sans Makefile, utilisation des règles implicites</title>
      <link>https://jonathanpoelen.github.io/2013/06/make-sans-makefile-utilisation-des-r%C3%A8gles-implicites/</link>
      <pubDate>Wed, 26 Jun 2013 11:05:28 +0100</pubDate>
      <author>jonathan.poelen@gmail.com (Jonathan Poelen)</author>
      <guid>https://jonathanpoelen.github.io/2013/06/make-sans-makefile-utilisation-des-r%C3%A8gles-implicites/</guid>
      <description>La commande GNU make possède énormément de commandes implicites regroupées dans un Makefile &amp;laquo;&amp;nbsp;par défaut&amp;nbsp;&amp;raquo; avec plein de règles. Celui-ci est visible en tapant make -pf /dev/null dans un terminal.
Rien qu&amp;rsquo;avec ça, on peut compiler des fichiers C, C++, archive, latex, etc. Il y a de quoi faire en fait.
Par exemple, je crée un fichier C nommé test.c:
int main(int ac, char** av) { return ac; } Que je compile avec make test pour créer l&amp;rsquo;exécutable test.</description>
    </item>
    
  </channel>
</rss>